package adventofcode;

import java.util.*;

/**
 * Created by Sun on 12/20/2019.
 * Donut Maze
 */
public class Day20 {

    static char[][] grid;
    static Map<Integer, Integer> portals;
    static Map<Integer, Integer> layerOffset;
    static final int[][] offsets = new int[][]{
            {1, 0}, {-1, 0}, {0, 1}, {0, -1}
    };
    static int entryPoint;
    static int exitPoint;

    public static void main(String[] args) {
        String[] lines = INPUT.split("\n");
        grid = new char[lines.length][];
        for (int i = 0; i < grid.length; i++) {
            grid[i] = lines[i].toCharArray();
        }
        buildPortals();
        System.out.println(part1());
        System.out.println(part2());
    }

    static int part2() {
        Set<String> visited = new HashSet<>();
        List<String> prev = new ArrayList<>();
        List<String> next = new ArrayList<>();
        prev.add(new Place(entryPoint / 10000, entryPoint % 10000, 0).toString());
        String exit = new Place(exitPoint / 10000, exitPoint % 10000, 0).toString();
        int steps = 0;
        while (true) {
            next.clear();
            for (String placeString : prev) {
                if (placeString.equals(exit)) {
                    return steps;
                }
                visited.add(placeString);
                Place place = new Place(placeString);
                for (int[] offset : offsets) {
                    int r = place.row + offset[0];
                    int c = place.col + offset[1];
                    Place newPlace = new Place(r, c, place.layer);
                    String newString = newPlace.toString();
                    if (visited.contains(newString)) {
                        continue;
                    }
                    if (grid[r][c] != '.') {
                        continue;
                    }
                    next.add(newString);
                }
                int placeNum = place.getNum();
                if (portals.containsKey(placeNum)) {
                    int p = portals.get(placeNum);
                    int r = p / 10000;
                    int c = p % 10000;
                    Place newPlace = new Place(r, c, place.layer + layerOffset.get(placeNum));
                    String newString = newPlace.toString();
                    if (newPlace.layer >= 0 && !visited.contains(newString)) {
                        next.add(newString);
                    }
                }
            }
            prev.clear();
            prev.addAll(next);
            steps++;
        }
    }

    static class Place {
        int row;
        int col;
        int layer;

        public Place(int row, int col, int layer) {
            this.row = row;
            this.col = col;
            this.layer = layer;
        }

        public Place(String s) {
            String[] split = s.split(",");
            row = Integer.parseInt(split[0]);
            col = Integer.parseInt(split[1]);
            layer = Integer.parseInt(split[2]);
        }

        int getNum() {
            return row * 10000 + col;
        }

        @Override
        public String toString() {
            return row + "," + col + "," + layer;
        }
    }

    static int part1() {
        Set<Integer> visited = new HashSet<>();
        List<Integer> prev = new ArrayList<>();
        List<Integer> next = new ArrayList<>();
        prev.add(entryPoint);
        int steps = 0;
        while (true) {
            next.clear();
            for (Integer place : prev) {
                if (place == exitPoint) {
                    return steps;
                }
                visited.add(place);
                int row = place / 10000;
                int col = place % 10000;
                for (int[] offset : offsets) {
                    int r = row + offset[0];
                    int c = col + offset[1];
                    int newPlace = r * 10000 + c;
                    if (visited.contains(newPlace)) {
                        continue;
                    }
                    if (grid[r][c] != '.') {
                        continue;
                    }
                    next.add(newPlace);
                }
                if (portals.containsKey(place)) {
                    int newPlace = portals.get(place);
                    if (!visited.contains(newPlace)) {
                        next.add(newPlace);
                    }
                }
            }
            prev.clear();
            prev.addAll(next);
            steps++;
        }
    }

    static void buildPortals() {
        portals = new HashMap<>();
        layerOffset = new HashMap<>();
        Map<String, Integer> firstFind = new HashMap<>();
        Map<String, Integer> secondFind = new HashMap<>();
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[row].length; col++) {
                if (grid[row][col] != '.') {
                    continue;
                }
                for (int[] offset : offsets) {
                    char first = grid[row + offset[0]][col + offset[1]];
                    if (!Character.isUpperCase(first)) {
                        continue;
                    }
                    int place = row * 10000 + col;
                    char second = grid[row + offset[0] * 2][col + offset[1] * 2];
                    if (first == 'A' && second == 'A') {
                        entryPoint = place;
                        break;
                    } else if (first == 'Z' && second == 'Z') {
                        exitPoint = place;
                        break;
                    }
                    String key;
                    if ((offset[0] + offset[1]) > 0) {
                        key = first + "" + second;
                    } else {
                        key = second + "" + first;
                    }
                    if (offset[0] > 0) {
                        if (row < grid.length / 2) {
                            layerOffset.put(place, 1);
                        } else {
                            layerOffset.put(place, -1);
                        }
                    } else if (offset[0] < 0) {
                        if (row > grid.length / 2) {
                            layerOffset.put(place, 1);
                        } else {
                            layerOffset.put(place, -1);
                        }
                    } else if (offset[1] > 0) {
                        if (col < grid[0].length / 2) {
                            layerOffset.put(place, 1);
                        } else {
                            layerOffset.put(place, -1);
                        }
                    } else if (offset[1] < 0) {
                        if (col > grid[0].length / 2) {
                            layerOffset.put(place, 1);
                        } else {
                            layerOffset.put(place, -1);
                        }
                    }
                    if (firstFind.containsKey(key)) {
                        secondFind.put(key, place);
                    } else {
                        firstFind.put(key, place);
                    }
                    break;
                }
            }
        }
        for (Map.Entry<String, Integer> entry : firstFind.entrySet()) {
            portals.put(entry.getValue(), secondFind.get(entry.getKey()));
            portals.put(secondFind.get(entry.getKey()), entry.getValue());
        }
    }

    static final String INPUT = "" +
            "                               Y       P           J       L     Y N     Q   H                                     \n" +
            "                               I       O           J       H     Y S     G   M                                     \n" +
            "  #############################.#######.###########.#######.#####.#.#####.###.###################################  \n" +
            "  #.....................#.........#...#.....#.......#.......#.#.......#.....#.........#.#.........#.#.#...#.#...#  \n" +
            "  #.#.#.###.###.###.###.#.#.###.###.#.###.###.#######.#.###.#.###.###.#.###.#####.#.###.#.#########.#.###.#.#.###  \n" +
            "  #.#.#.#.#.#.#.#...#...#.#.#.#.....#.#.....#.......#.#.#.#...#.....#.#.#.#.#.#...#.............#.#.#...........#  \n" +
            "  #####.#.#.#.###.#.###.#####.#.#####.###.#.#####.#.#.###.#########.#####.#.#.###.###############.#.#.#.###.###.#  \n" +
            "  #...#...#.#.#...#.#.#.......#.#.....#...#...#...#.#.....#.......#...#.........#...........#...#.....#.#...#.#.#  \n" +
            "  ###.#.#####.#######.#.#.###.###.#.#######.###.#####.#########.###.#####.#.#######.#.#########.#.#.#######.#.###  \n" +
            "  #.....#.#.#.....#.....#...#.....#.#.#.....#.....#.......#.....#...#...#.#.#.#.#...#.#.#...#...#.#...#...#.....#  \n" +
            "  ###.#.#.#.#####.###.###.#####.#####.###.###.#.#.###.#.#.#.#.#.#.###.#.#.###.#.###.#.#.###.#.#.#.#######.#.#####  \n" +
            "  #...#.#...#...#.#...#...#.......#.....#.#.#.#.#...#.#.#.#.#.#.....#.#.........#...#.#.....#.#.....#...#.#.#...#  \n" +
            "  #.#######.#.###.###.###.#######.#.#.#.#.#.#.###.###.###.#.#.#.#####.#############.###.#######.#######.#.#####.#  \n" +
            "  #.#...#...........#.#...#.........#.#.#...#.#.#.#.....#.#.#.#...#.........#...#.#.......#...........#...#.....#  \n" +
            "  #.#.#####.#.###.#############.#.###.#####.#.#.#######.#####.#####.#.###.#.#.###.#.###.###.#############.#####.#  \n" +
            "  #.#...#.#.#.#.......#...#.....#.#.....#.#.#.......#.#...#...#...#.#...#.#.#...#.#...#...........#.#.#.......#.#  \n" +
            "  ###.#.#.#######.###.###.###########.#.#.#.###.#####.#.###.#.#.#####.#.###.#.###.#.#####.#.#.###.#.#.###.#####.#  \n" +
            "  #.#.#.#.....#.#.#.#.#...............#.#...#...#...#.....#.#.....#.#.#.#.......#.....#...#.#...#.....#.#.......#  \n" +
            "  #.###.#.#####.###.#.#.#######.#####.#.###.#.#####.#.#######.#####.#.###.#.#####.#######.#.###.#.#.###.#.#.#.#.#  \n" +
            "  #...#...#.#.#...#...#.#.#.#.#...#.#.#.#.#.#.....#.......#.....#.#...#...#...#.........#.#...#.#.#.#.....#.#.#.#  \n" +
            "  #.#####.#.#.###.###.###.#.#.#####.#.###.#.###.#######.###.#.###.#########.#####.#######################.#.###.#  \n" +
            "  #.#.........#.#.#.....#...........#...#...#.#...#.#.#...#.#.#...#.........#.....#.#.#.#...#.....#...#...#.#.#.#  \n" +
            "  #.#######.###.#.###.#.###########.#.###.###.#.#.#.#.###.###.#.#.#########.#####.#.#.#.###.###.###.#####.###.###  \n" +
            "  #.#...#...#.....#...#...#.#.#.......#.....#...#.#.......#...#.#.#.......#...#.....................#.#...#.#.#.#  \n" +
            "  #.###.###.#.#########.###.#.###.#.#.#####.#.#######.###.###.#.#######.###.#######.#.###.###.#.###.#.###.#.#.#.#  \n" +
            "  #.#...#...#.#.#...#.....#.#...#.#.#.#.....#.....#.....#.#.......#.#...#.....#.#...#...#.#.#.#.#...#...#.......#  \n" +
            "  #.###.#.###.#.#.###.###.#.###.###.###.###.#.###.#####.#.#.###.#.#.###.#.#.###.#.#########.#########.#.###.#####  \n" +
            "  #.....#.#.#.....#.#.#...............#...#.#.#...#.....#.#.#...#...#.....#...#.......#.#.#.#.......#.#...#...#.#  \n" +
            "  #####.#.#.#.#####.#####.#########.#####.###.#######.#######.#.#########.#####.#######.#.#.###.#######.#.#.#.#.#  \n" +
            "  #...#...#.#.......#...#.#.#      E     Y   V       U       W L         Y     J      #...#.#...#...#.#.#.#.#.#.#  \n" +
            "  ###.#.###.#.###.#.###.###.#      R     I   B       H       T D         Y     R      ###.#.#.###.###.#.###.###.#  \n" +
            "  #.......#.....#.#.#...#.#.#                                                         #.............#.....#...#.#  \n" +
            "  ###.###.###.#########.#.#.#                                                         #####.###.#.###.#####.###.#  \n" +
            "  #.#.#.#.#.#.#.#.....#.....#                                                         #...#.#...#.#...#...#...#.#  \n" +
            "  #.#.#.###.#.#.#####.#####.#                                                         #.###.#.#######.#.###.###.#  \n" +
            "  #.#...#...#.#...#...#.....#                                                       JJ..#...#...#.#.....#...#.#..KB\n" +
            "  #.###.###.#.###.#.#.#.#.#.#                                                         #.#.#####.#.###.###.###.#.#  \n" +
            "  #...#.#.#.........#...#.#..FR                                                       #.....#...................#  \n" +
            "  #.###.#.#######.#####.#.#.#                                                         ###########################  \n" +
            "RX........#.....#.....#.#.#.#                                                       PO..#.....#...............#..YB\n" +
            "  ###.###.###.#####.#########                                                         #.#.###.###.#.#.#.#####.#.#  \n" +
            "  #.....#.............#.....#                                                         #.....#...#.#.#.#.#.......#  \n" +
            "  ###.###.###.#.#.#######.###                                                         #.#######.#.#.#.#########.#  \n" +
            "PU..#.#.....#.#.#...#...#.#.#                                                         #...#.....#.#.#.....#...#.#  \n" +
            "  #.#.###.#######.#####.#.#.#                                                         #####.#####.###.###.###.#.#  \n" +
            "  #.#.#.#...#.#...#...#......KB                                                       #.#.#.........#...#...#...#  \n" +
            "  #.###.#####.#####.#####.###                                                         #.#.#####.#################  \n" +
            "  #.#.#.......#...#.#.#.#...#                                                       YB......#.....#...#.......#.#  \n" +
            "  #.#.#.#.#.###.###.#.#.###.#                                                         #.#.#.#########.#.#.#.###.#  \n" +
            "  #.....#.#.................#                                                         #.#.#.#.......#.#.#.#.....#  \n" +
            "  ###################.#######                                                         ###.#####.#####.#########.#  \n" +
            "  #.#.......#.......#...#.#.#                                                         #.#...#.....#.#...#.......#  \n" +
            "  #.#.#####.#.###.#.#####.#.#                                                         #.###.###.#.#.#.#######.#.#  \n" +
            "  #.....#...#.#.#.#.#.#......BI                                                       #.#.#.....#.............#..LD\n" +
            "  #.#######.#.#.###.#.#####.#                                                         #.#.#####.#################  \n" +
            "  #.....#.......#.....#...#.#                                                         #.......#.#...#...#...#...#  \n" +
            "  #.###############.###.#.#.#                                                         #.###.#.###.#.#.###.#.#.#.#  \n" +
            "YT......#.......#.......#...#                                                         #.#...#...#.#.......#...#..BB\n" +
            "  #####.#.###.###############                                                         #.#####.###.#.###.###.#####  \n" +
            "  #...#.#.#.................#                                                       JN....#...#.#.#.#.#...#.#...#  \n" +
            "  #.#.#####.#######.#.#.###.#                                                         #######.#.#.#.#.#########.#  \n" +
            "  #.#.#.....#.#...#.#.#...#.#                                                         #.#.#.......#.#...#.......#  \n" +
            "  #.#.#.###.#.#####.#.#####.#                                                         #.#.###########.#.#######.#  \n" +
            "  #.#.#.#.#.....#.#.#.#.#...#                                                         #.....#.....#...#.#.#.....#  \n" +
            "  #.#.###.#####.#.#####.###.#                                                         #.#.###.#.#.###.#.#.#.#.#.#  \n" +
            "WT..#...........#.#...#.#.#..SG                                                     PU..#.#...#.#.....#.#...#.#..JN\n" +
            "  ###############.#.###.#.###                                                         #.#####.###.#.#.#######.#.#  \n" +
            "  #...#.#.............#.....#                                                         #.......#...#.#.....#...#.#  \n" +
            "  #.#.#.#.#.#######.#.###.#.#                                                         #.###############.###.#.#.#  \n" +
            "  #.#...#.#...#.....#.#...#.#                                                         #...#...#.#.#...#.....#.#.#  \n" +
            "  #.#.###.#######.#####.###.#                                                         #####.###.#.###.###########  \n" +
            "VB..#...#...#.........#.#.#..LH                                                       #...#.....................#  \n" +
            "  #####.#.#####.###.#.#.#.#.#                                                         #.#.#####.###.#.###.#####.#  \n" +
            "  #.#.#.......#.#...#.....#.#                                                       NS..#.#.#.#.#.#.#.#.#.#...#.#  \n" +
            "  #.#.#####.#.#.#.#.#########                                                         ###.#.#.#.#.#.#.#.#.#.#####  \n" +
            "  #...#.#.#.#.#.#.#...#...#.#                                                         #.......#...#.#.#.#...#....KU\n" +
            "  #.#.#.#.###.#########.###.#                                                         #.#####.#.###.###.###.#.###  \n" +
            "AA..#.......#.#.#.....#...#..DU                                                       #.#...#...#...#.#...#.....#  \n" +
            "  #.###.#######.#####.#.#.#.#                                                         ###.###########.#.#########  \n" +
            "  #.#...#.....#.#...#...#.#.#                                                         #.......................#.#  \n" +
            "  #.#.###.#.###.###.#.###.#.#                                                         #.#.#.#.#.#.#.#.#.#####.#.#  \n" +
            "ER..#.....#...........#.#...#                                                       QG..#.#.#.#.#.#.#.#.#.......#  \n" +
            "  ###.#.#.###.###.#.#.#.#.#.#                                                         #.###.#.#######.#####.###.#  \n" +
            "  #...#.#.#...#...#.#...#.#.#                                                         #.#...#.#.#.......#...#...#  \n" +
            "  #.#.###.#.#####.#########.#                                                         #.#.#.#.#.#.###.###.#####.#  \n" +
            "  #.#...#.#...#.......#.....#                                                         #.#.#.#.#...#.....#.#.#....DU\n" +
            "  ###.#.###.#.###.#.#####.#.#        T         Y       H   R       K         B        ###.#####.#####.###.#.###.#  \n" +
            "  #.#.#...#.#.#.#.#.#.....#.#        S         T       M   X       U         B        #...#.#.#.#.......#.#.....#  \n" +
            "  #.#.#.#####.#.#.#####.#############.#########.#######.###.#######.#########.###########.#.#.#####.#.#.#.###.###  \n" +
            "  #...#...#.....#...#.#.#.....#.#.......#.#.#.#.....#.....#.#.....#.#...#.......#...#...#...#.......#.#.#.#.....#  \n" +
            "  ###.#######.#####.#.#######.#.###.#####.#.#.###.###.#.###.#.#.###.#.#.#####.#####.#.###.###.#.###.#########.#.#  \n" +
            "  #.........#.#.......#.#.............#.....#.....#...#.#.....#.#.....#...#.....#.....#.#.#.#.#.#.#.......#...#.#  \n" +
            "  #.###.#####.#######.#.###.###.#.#.#.#.#.#####.###.#####.###.#.#######.#.#.###.#.###.#.###.#.###.#.###.###.#.###  \n" +
            "  #...#...#.......#.......#.#.#.#.#.#...#.#.#.....#.....#.#...#...#...#.#.#...#.....#.......#.#.....#.....#.#...#  \n" +
            "  #.###.#####.#.###.###.#####.#.#.#.#.#.#.#.###.#####.###########.#.#.###.#######.###.#.#####.#.###.###.###.#####  \n" +
            "  #.#...#.....#.#.#.#...#.#.#...#.#.#.#.#...#...#...........#.....#.#.......#...#...#.#.#.....#.#.....#.#.......#  \n" +
            "  #.#####.#####.#.#######.#.#.#.#.#######.###.#.#.#####.###.#####.#.#####.#.###.#.###.#####.#.###.#.#######.#.#.#  \n" +
            "  #.#.....#.......#.#.........#.#.#...#.....#.#.#...#.....#.#.....#.#.#...#.#.....#.#.#...#.#.#...#.#.#.....#.#.#  \n" +
            "  #######.#.#.#.#.#.#########.#######.###.###.###.#####.#.###.###.#.#.#.#.###.###.#.###.###.#######.#.###.#.#.###  \n" +
            "  #.......#.#.#.#.#...#.#.#...#.#.........#.....#...#...#...#.#...#...#.#...#...#.....#...#.#.#.#.....#...#.#...#  \n" +
            "  #####.###.#.###.#.###.#.#####.#####.###.#.#.###.#######.#.#.###.#.###.#.#######.#####.#####.#.###########.#####  \n" +
            "  #.......#.#.#...#.......#.#.......#.#.#.#.#...#.#...#...#.#.#...#...#.#.#.#.......................#.#.#.......#  \n" +
            "  ###.#.#########.#######.#.#####.#.###.#.#.#.#####.#####.#######.#.#######.#####.###.#####.###.#.#.#.#.###.#.#.#  \n" +
            "  #...#.#.........#.#...#.#.......#.#.....#.#.#.....#...#.#.#.....#...#.#.#.#...#.#.#.#.#...#...#.#.....#...#.#.#  \n" +
            "  ###.###.###.#####.###.#.#########.#####.#.###.###.###.#.#.###.###.###.#.#.#.###.#.###.#######.#############.###  \n" +
            "  #.....#.#.....#.#.................#.#...#.....#...#.#.....#.....#.#...#.#...#...............#.....#.#.........#  \n" +
            "  #.###.#.#######.#.#.###.#####.###.#.###.###.#######.###.#.#####.#.#.###.#.#.#.#.###.###.#####.#.#.#.#######.###  \n" +
            "  #.#...#.#...#.....#.#...#.#...#.#.........#.....#...#...#.#.#...#.......#.#.#.#.#.#...#.#.#.#.#.#.........#...#  \n" +
            "  #.#####.#.###.#.###.#.###.#####.###.#####.#.###.###.###.###.#.#########.#.#.#.#.#.#.#####.#.###.#.#.###.#####.#  \n" +
            "  #.#.#...#...#.#.#...#.#.#.#...#...#.....#.#...#...#...#.#.#...#.#.....#.#.#...#...#.#.#.#...#...#.#.#.......#.#  \n" +
            "  #.#.#.#.#.#.###########.#.###.###.###.#####.#######.#.#.#.#.###.#.###.#.#.###########.#.#.###.#.#.#.###.#.#.###  \n" +
            "  #.#...#.#.#.#.#.....#.........#.#.#...#.....#.#.....#...#.....#.#.#.#...#.#...#.#.#...#.....#.#.#.#...#.#.#...#  \n" +
            "  #.###.###.#.#.###.###.###.###.#.#.###.###.###.###.#######.#####.#.#.#.#.#.#.#.#.#.###.#.#.#.#####.#.#.#.#.###.#  \n" +
            "  #.#...#...#...........#.....#.........#.........#.......#.....#...#.#.#.#...#...........#.#...#...#.#.#.#.#...#  \n" +
            "  ###################################.#####.#####.#######.#####.###.#############.###############################  \n" +
            "                                     J     Z     F       S     T   U             B                                 \n" +
            "                                     R     Z     R       G     S   H             I                                 ";
}
